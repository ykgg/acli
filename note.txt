1 自己写一个脚手架就可以理解为是用 Node 来做一个工具
2 这个工具别人可以下载安装至全局使用，因此它会对外提供一个命令，之后在命令行中执就可以使用这个命令 
3 这个命令运行之后之所以生效一定是因为它的背后执行了 js 代码 
4 总结：当前我们要做的就是初始化一个工具包，然后提供一个命令，在命令行中执行它的时候可以执行指定的JS 文件中的代码 
  01 新建了二个目录.... 
  02 初始化包同时修改相应的文件路径
  03 npm link --->将当前自定义的命令临时的放在全局，可以执行 bin 下的 cli.js 

1 做为一个像样的脚手架工具，我们也希望自己的命令行可以有格式化的输出  
2 引入了 commander 这个包，看到了它可以帮我去处理命令行中参数的格式 
3 使用 commander中的 program 演示了基本使用  
4 工具存在多个动作的时候，用代码循环来实现

1 当用户在命令行使用 --help 可以看到我们提前准备好的示例代码

1 对应工具包的 cli.js 文件来说，它一般有二个核心的功能：
  01 接收命令行参数进行组装和格式化处理
  02 将这些参数交给对应的业务代码使用，从而完成当前动作对应的业务逻辑
2 当前示例当中我相将命令行参数传递至 lib/index.js 

